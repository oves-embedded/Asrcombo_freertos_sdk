/**
 ****************************************************************************************
 *
 * @file app.h
 *
 * @brief Application entry point
 *
 * Copyright (C) ASR 2020-2029
 *
 ****************************************************************************************
 */

#ifndef APP_H_
#define APP_H_

/**
 ****************************************************************************************
 * @addtogroup APP
 * @ingroup RICOW
 *
 * @brief Application entry point.
 *
 * @{
 ****************************************************************************************
 */

/*
 * INCLUDE FILES
 ****************************************************************************************
 */
#include "sonata_ble_hook.h"
#include "sonata_gap.h"

/*
 * DEFINES
 ****************************************************************************************
 */


/*
 * MACROS
 ****************************************************************************************
 */
/// debug trace
#define APP_DBG    1
#if APP_DBG
#define APP_TRC    printf
#else
#define APP_TRC(...)
#endif //APP_DBG

#define APP_DBG_HIGH    1
#if APP_DBG_HIGH
#define APP_TRC_HIGH    printf
#else
#define APP_TRC_HIGH(...)
#endif //APP_DBG_HIGH


#define APP_DBG_ERROR    1
#if APP_DBG_ERROR
#define APP_TRC_ERROR    printf
#else
#define APP_TRC_ERROR(...)
#endif //APP_DBG_HIGH

#define  SONATA_CFG_BLE_MULT_TEST
#define USE_LEGA_RTOS




#define APP_MTU              (500)
#define APP_ATT_DB_ITEM_MAX  (100)


#define SYS_APP_VERSION_SEG __attribute__((section("app_version_sec")))

#define USE_APP_SEC     (1)

#define DEMO_PRF_DISS   (0)
#define DEMO_PRF_BASS   (0)
#define DEMO_PRF_OTA    (0)
#define DEMO_LONG_RANGE (0)
#define DEMO_ROM_PATCH  (0)
//#define DEMO_RANDOM_ADDRESS    //Demo how to use static random address, address can be set by user
#ifdef DEMO_RANDOM_ADDRESS
    #define DEMO_RANDOM_RESLOVE_ADDRESS  //Demo how to use resolvable private random address, the address is generated by sonata_ble_gap_generate_random_address()
#endif
/*
 * ENUMERATIONS
 ****************************************************************************************
 */


typedef enum
{
    APP_TIMER_START          = (40),
    APP_TIMER_TEST           = (APP_TIMER_START + 1),
    APP_TIMER_READ_RSSI      = (APP_TIMER_START + 2),
    APP_TIMER_UART           = (APP_TIMER_START + 3),
    APP_TIMER_ADV_DATA       = (APP_TIMER_START + 4),
    APP_TIMER_NTF_DATA       = (APP_TIMER_START + 5),
    APP_TIMER_CMD1           = (APP_TIMER_START + 6),   //Endless timer
    APP_TIMER_CMD2           = (APP_TIMER_START + 7),   //Normal timer
    APP_TIMER_CMD3           = (APP_TIMER_START + 8),   //Long timer
    APP_TIMER_OOB            = (APP_TIMER_START + 9),
    APP_TIMER_MCONN          = (APP_TIMER_START + 10),

}app_timer_msg;


typedef enum
{
    /// at command operation
    APP_EVENT_UART_CMD           = (10),
    APP_EVENT_MASS_DATA          = (11),

}app_event;

typedef enum
{
    STATUS_NONE = 0,
    STATUS_SCAN = 1,
    STATUS_ADV = 2,
    STATUS_INITIATING = 3,
    STATUS_PERIODSYNC = 4,

}app_status;

#if (APP_BLUETOOTH_RESOURCE)
#define APP_ACTIVE_MAX SONATA_CFG_ACT
#else
#define APP_ACTIVE_MAX 5
#endif

typedef struct actives_t{
    uint8_t assign_id ;
    uint8_t type;//A0:Adv  A1:Scan  A2:Peer
    bool runing;
    uint8_t peer[SONATA_GAP_BD_ADDR_LEN];
    uint8_t name[20];
}actives;


typedef struct app_uuid_t{
    uint16_t service;
    uint16_t read;
    uint16_t write;
    uint16_t ntf;
}app_uuids;

typedef struct att_db_item_t
{
    uint16_t uuid;
    uint16_t svc_uuid;
    uint16_t hdl;
    uint8_t start;
    uint8_t end;
    uint8_t prop;
} att_db_item;
/*
 * TYPE DEFINITIONS
 ****************************************************************************************
 */




/*
 * GLOBAL VARIABLE DECLARATION
 ****************************************************************************************
 */
extern sonata_ble_hook_t app_hook;
extern uint32_t gTimeStamp ;


/*
 * FUNCTION DECLARATIONS
 ****************************************************************************************
 */

/**
 ****************************************************************************************
 * @brief Initialize the BLE demo application.
 ****************************************************************************************
 */
void app_init(void);

void app_reset();

uint8_t app_get_connection_id();

void app_ble_get_peer_rssi();

void app_ble_config_legacy_advertising();

void app_ble_config_direct_legacy_advertising(bool highDuty, bool addrType, uint8_t *address);

void app_ble_config_extended_advertising();

void app_ble_config_periodic_advertising();

void app_ble_config_period_sync(uint8_t type);

void app_ble_config_scanning(uint8_t type, uint8_t *target);

void app_ble_config_initiating(uint8_t type, uint8_t *address);

app_status app_get_status();

actives *app_get_active();

bool app_is_dt_mode();

void app_set_dt_mode(bool on);

void app_set_adv_scan_response_data_flag(bool on);

bool app_ble_send_data(uint8_t conidx, uint16_t length, uint8_t*data);


bool app_ble_master_write_data(uint8_t conidx, uint16_t length, uint8_t *data);

bool app_ble_master_write_data_no_response(uint8_t conidx, uint16_t length, uint8_t *data);

bool app_ble_master_read_data(uint8_t conidx, uint16_t hdl);

bool app_ble_master_turn_ntf(uint8_t conidx, uint8_t hdl, bool on);

void app_ble_slave_send_data_via_ntf(uint8_t conidx, uint16_t data_len, uint8_t *data, bool log);

void app_ble_change_conn_params();

void app_ble_stop_advertising();

void app_ble_disconnect(uint8_t conidx, uint8_t reason);

void app_ble_stop_initiating();

bool app_ble_master_turn_ind(uint8_t conidx, uint8_t hdl, bool on);
void app_ble_discovery_svc(uint8_t idx, uint8_t *uuid);
void app_ble_discovery_char(uint8_t idx, uint8_t *uuid);
void app_ble_discovery_desc(uint8_t idx);
void app_ble_stop_scanning();
void app_ble_stop_period_sync();
void app_att_db_push(uint16_t hdl, uint16_t uuid);
void app_att_db_update_range(uint16_t hdl, uint16_t uuid,uint8_t start, uint8_t end);
void app_att_db_update_prop(uint16_t hdl, uint8_t prop);
att_db_item *app_att_db_search(uint16_t uuid);
att_db_item *app_att_db_get();
void app_att_db_clear();
bool app_att_is_db_filled();
void app_sec_passkey_send_yesno(uint8_t  conidx, bool accept);
void app_ble_update_adv_data(uint16_t counter);
bool app_is_dts_on();
void app_prf_api_init(void) ;

#if defined(CFG_PLF_SONATA) || defined(CFG_PLF_RV32)
uint8_t app_config(uint8_t type, app_config_t * cfg);
#endif


//void app_set_resolve_list(uint8_t count, struct gap_ral_dev_info *info);
/// @} APP


#endif // APP_H_
